Terminals which are not used

   BOOLEAN
   TRUE
   FALSE
   LLP


State 144 conflicts: 1 reduce/reduce
State 146 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: decl_and_def_list

    2 decl_and_def_list: declaration_list decl_and_def_list
    3                  | definition_list decl_and_def_list_mustdef

    4 decl_and_def_list_mustdef: declaration_list decl_and_def_list_mustdef
    5                          | definition_list decl_and_def_list_mustdef
    6                          | /* empty */

    7 declaration_list: const_decl
    8                 | var_decl
    9                 | funct_decl

   10 definition_list: funct_defi

   11 var_decl: scalar_type identifier_list SEMICOLON

   12 scalar_type: INT
   13            | FLOAT
   14            | BOOL
   15            | DOUBLE
   16            | STRING

   17 identifier: ID
   18           | ID array_int

   19 array_int: '[' INTEGER ']'
   20          | '[' INTEGER ']' array_int

   21 identifier_list: identifier_list ',' identifier
   22                | identifier
   23                | identifier_list ',' ID '=' expression
   24                | ID '=' expression
   25                | identifier_list ',' ID array_int '=' initial_array
   26                | ID array_int '=' initial_array

   27 initial_array: '{' expression_list '}'

   28 const_decl: CONST scalar_type const_list SEMICOLON

   29 const_list: ID '=' literal_const ',' const_list
   30           | ID '=' literal_const

   31 literal_const: INTEGER
   32              | FLOATCONST
   33              | STRINGCONST
   34              | SCIENTIFIC

   35 funct_decl: scalar_type ID '(' arguments ')' SEMICOLON
   36           | VOID ID '(' arguments ')' SEMICOLON

   37 funct_defi: scalar_type ID '(' arguments ')' compound
   38           | VOID ID '(' arguments ')' compound

   39 arguments: nonempty_arguments
   40          | /* empty */

   41 nonempty_arguments: nonempty_arguments ',' argument
   42                   | argument

   43 argument: scalar_type identifier

   44 statement: compound
   45          | simple
   46          | conditional
   47          | while
   48          | for
   49          | jump
   50          | procedure_call

   51 compound: '{' compound_list '}'

   52 compound_list: var_decl compound_list
   53              | const_decl compound_list
   54              | statement compound_list
   55              | /* empty */

   56 simple: variable_reference '=' expression SEMICOLON
   57       | PRINT variable_reference SEMICOLON
   58       | PRINT expression SEMICOLON
   59       | READ variable_reference

   60 variable_reference: ID
   61                   | array_reference

   62 array_reference: ID array_expre

   63 array_expre: '[' expression ']' array_expre
   64            | '[' expression ']'

   65 expression: expression_component
   66           | expression_component operator expression
   67           | '(' expression ')'
   68           | '!' expression
   69           | '-' expression

   70 expression_component: literal_const
   71                     | ID
   72                     | funciton_invocation
   73                     | array_reference

   74 operator: '-'
   75         | '*'
   76         | '/'
   77         | '%'
   78         | '+'
   79         | logical
   80         | AND
   81         | OR

   82 logical: '<'
   83        | '>'
   84        | LE
   85        | EQ
   86        | GE
   87        | NE

   88 conditional: IF '(' boolean_expression ')' compound ELSE compound
   89            | IF '(' boolean_expression ')' compound

   90 while: WHILE '(' boolean_expression ')' compound
   91      | DO compound WHILE '(' boolean_expression ')'

   92 boolean_expression: expression

   93 for: FOR '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')'

   94 initial_expression: ID '=' expression
   95                   | scalar_type ID '=' expression
   96                   | /* empty */

   97 control_expression: expression
   98                   | /* empty */

   99 increment_expression: expression
  100                     | /* empty */

  101 jump: RETURN expression SEMICOLON
  102     | BREAK SEMICOLON
  103     | CONTINUE SEMICOLON

  104 procedure_call: funciton_invocation

  105 funciton_invocation: ID '(' expression_list ')' SEMICOLON

  106 expression_list: expression ',' expression_list
  107                | expression
  108                | /* empty */


Terminals, with rules where they appear

$end (0) 0
'!' (33) 68
'%' (37) 77
'(' (40) 35 36 37 38 67 88 89 90 91 93 105
')' (41) 35 36 37 38 67 88 89 90 91 93 105
'*' (42) 75
'+' (43) 78
',' (44) 21 23 25 29 41 106
'-' (45) 69 74
'/' (47) 76
'<' (60) 82
'=' (61) 23 24 25 26 29 30 56 94 95
'>' (62) 83
'[' (91) 19 20 63 64
']' (93) 19 20 63 64
'{' (123) 27 51
'}' (125) 27 51
error (256)
SEMICOLON (258) 11 28 35 36 56 57 58 93 101 102 103 105
ID (259) 17 18 23 24 25 26 29 30 35 36 37 38 60 62 71 94 95 105
SCIENTIFIC (260) 34
INTEGER (261) 19 20 31
FLOATCONST (262) 32
STRINGCONST (263) 33
CONST (264) 28
BOOL (265) 14
VOID (266) 36 38
FLOAT (267) 13
DOUBLE (268) 15
STRING (269) 16
INT (270) 12
READ (271) 59
PRINT (272) 57 58
WHILE (273) 90 91
DO (274) 91
IF (275) 88 89
ELSE (276) 88
FOR (277) 93
CONTINUE (278) 103
BREAK (279) 102
RETURN (280) 101
BOOLEAN (281)
TRUE (282)
FALSE (283)
LLP (284)
NE (285) 87
GE (286) 86
EQ (287) 85
LE (288) 84
AND (289) 80
OR (290) 81


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
decl_and_def_list (54)
    on left: 2 3, on right: 1 2
decl_and_def_list_mustdef (55)
    on left: 4 5 6, on right: 3 4 5
declaration_list (56)
    on left: 7 8 9, on right: 2 4
definition_list (57)
    on left: 10, on right: 3 5
var_decl (58)
    on left: 11, on right: 8 52
scalar_type (59)
    on left: 12 13 14 15 16, on right: 11 28 35 37 43 95
identifier (60)
    on left: 17 18, on right: 21 22 43
array_int (61)
    on left: 19 20, on right: 18 20 25 26
identifier_list (62)
    on left: 21 22 23 24 25 26, on right: 11 21 23 25
initial_array (63)
    on left: 27, on right: 25 26
const_decl (64)
    on left: 28, on right: 7 53
const_list (65)
    on left: 29 30, on right: 28 29
literal_const (66)
    on left: 31 32 33 34, on right: 29 30 70
funct_decl (67)
    on left: 35 36, on right: 9
funct_defi (68)
    on left: 37 38, on right: 10
arguments (69)
    on left: 39 40, on right: 35 36 37 38
nonempty_arguments (70)
    on left: 41 42, on right: 39 41
argument (71)
    on left: 43, on right: 41 42
statement (72)
    on left: 44 45 46 47 48 49 50, on right: 54
compound (73)
    on left: 51, on right: 37 38 44 88 89 90 91
compound_list (74)
    on left: 52 53 54 55, on right: 51 52 53 54
simple (75)
    on left: 56 57 58 59, on right: 45
variable_reference (76)
    on left: 60 61, on right: 56 57 59
array_reference (77)
    on left: 62, on right: 61 73
array_expre (78)
    on left: 63 64, on right: 62 63
expression (79)
    on left: 65 66 67 68 69, on right: 23 24 56 58 63 64 66 67 68 69
    92 94 95 97 99 101 106 107
expression_component (80)
    on left: 70 71 72 73, on right: 65 66
operator (81)
    on left: 74 75 76 77 78 79 80 81, on right: 66
logical (82)
    on left: 82 83 84 85 86 87, on right: 79
conditional (83)
    on left: 88 89, on right: 46
while (84)
    on left: 90 91, on right: 47
boolean_expression (85)
    on left: 92, on right: 88 89 90 91
for (86)
    on left: 93, on right: 48
initial_expression (87)
    on left: 94 95 96, on right: 93
control_expression (88)
    on left: 97 98, on right: 93
increment_expression (89)
    on left: 99 100, on right: 93
jump (90)
    on left: 101 102 103, on right: 49
procedure_call (91)
    on left: 104, on right: 50
funciton_invocation (92)
    on left: 105, on right: 72 104
expression_list (93)
    on left: 106 107 108, on right: 27 105 106


state 0

    0 $accept: . program $end

    CONST   shift, and go to state 1
    BOOL    shift, and go to state 2
    VOID    shift, and go to state 3
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    program            go to state 8
    decl_and_def_list  go to state 9
    declaration_list   go to state 10
    definition_list    go to state 11
    var_decl           go to state 12
    scalar_type        go to state 13
    const_decl         go to state 14
    funct_decl         go to state 15
    funct_defi         go to state 16


state 1

   28 const_decl: CONST . scalar_type const_list SEMICOLON

    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    scalar_type  go to state 17


state 2

   14 scalar_type: BOOL .

    $default  reduce using rule 14 (scalar_type)


state 3

   36 funct_decl: VOID . ID '(' arguments ')' SEMICOLON
   38 funct_defi: VOID . ID '(' arguments ')' compound

    ID  shift, and go to state 18


state 4

   13 scalar_type: FLOAT .

    $default  reduce using rule 13 (scalar_type)


state 5

   15 scalar_type: DOUBLE .

    $default  reduce using rule 15 (scalar_type)


state 6

   16 scalar_type: STRING .

    $default  reduce using rule 16 (scalar_type)


state 7

   12 scalar_type: INT .

    $default  reduce using rule 12 (scalar_type)


state 8

    0 $accept: program . $end

    $end  shift, and go to state 19


state 9

    1 program: decl_and_def_list .

    $default  reduce using rule 1 (program)


state 10

    2 decl_and_def_list: declaration_list . decl_and_def_list

    CONST   shift, and go to state 1
    BOOL    shift, and go to state 2
    VOID    shift, and go to state 3
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    decl_and_def_list  go to state 20
    declaration_list   go to state 10
    definition_list    go to state 11
    var_decl           go to state 12
    scalar_type        go to state 13
    const_decl         go to state 14
    funct_decl         go to state 15
    funct_defi         go to state 16


state 11

    3 decl_and_def_list: definition_list . decl_and_def_list_mustdef

    CONST   shift, and go to state 1
    BOOL    shift, and go to state 2
    VOID    shift, and go to state 3
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    $default  reduce using rule 6 (decl_and_def_list_mustdef)

    decl_and_def_list_mustdef  go to state 21
    declaration_list           go to state 22
    definition_list            go to state 23
    var_decl                   go to state 12
    scalar_type                go to state 13
    const_decl                 go to state 14
    funct_decl                 go to state 15
    funct_defi                 go to state 16


state 12

    8 declaration_list: var_decl .

    $default  reduce using rule 8 (declaration_list)


state 13

   11 var_decl: scalar_type . identifier_list SEMICOLON
   35 funct_decl: scalar_type . ID '(' arguments ')' SEMICOLON
   37 funct_defi: scalar_type . ID '(' arguments ')' compound

    ID  shift, and go to state 24

    identifier       go to state 25
    identifier_list  go to state 26


state 14

    7 declaration_list: const_decl .

    $default  reduce using rule 7 (declaration_list)


state 15

    9 declaration_list: funct_decl .

    $default  reduce using rule 9 (declaration_list)


state 16

   10 definition_list: funct_defi .

    $default  reduce using rule 10 (definition_list)


state 17

   28 const_decl: CONST scalar_type . const_list SEMICOLON

    ID  shift, and go to state 27

    const_list  go to state 28


state 18

   36 funct_decl: VOID ID . '(' arguments ')' SEMICOLON
   38 funct_defi: VOID ID . '(' arguments ')' compound

    '('  shift, and go to state 29


state 19

    0 $accept: program $end .

    $default  accept


state 20

    2 decl_and_def_list: declaration_list decl_and_def_list .

    $default  reduce using rule 2 (decl_and_def_list)


state 21

    3 decl_and_def_list: definition_list decl_and_def_list_mustdef .

    $default  reduce using rule 3 (decl_and_def_list)


state 22

    4 decl_and_def_list_mustdef: declaration_list . decl_and_def_list_mustdef

    CONST   shift, and go to state 1
    BOOL    shift, and go to state 2
    VOID    shift, and go to state 3
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    $default  reduce using rule 6 (decl_and_def_list_mustdef)

    decl_and_def_list_mustdef  go to state 30
    declaration_list           go to state 22
    definition_list            go to state 23
    var_decl                   go to state 12
    scalar_type                go to state 13
    const_decl                 go to state 14
    funct_decl                 go to state 15
    funct_defi                 go to state 16


state 23

    5 decl_and_def_list_mustdef: definition_list . decl_and_def_list_mustdef

    CONST   shift, and go to state 1
    BOOL    shift, and go to state 2
    VOID    shift, and go to state 3
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    $default  reduce using rule 6 (decl_and_def_list_mustdef)

    decl_and_def_list_mustdef  go to state 31
    declaration_list           go to state 22
    definition_list            go to state 23
    var_decl                   go to state 12
    scalar_type                go to state 13
    const_decl                 go to state 14
    funct_decl                 go to state 15
    funct_defi                 go to state 16


state 24

   17 identifier: ID .
   18           | ID . array_int
   24 identifier_list: ID . '=' expression
   26                | ID . array_int '=' initial_array
   35 funct_decl: scalar_type ID . '(' arguments ')' SEMICOLON
   37 funct_defi: scalar_type ID . '(' arguments ')' compound

    '['  shift, and go to state 32
    '='  shift, and go to state 33
    '('  shift, and go to state 34

    $default  reduce using rule 17 (identifier)

    array_int  go to state 35


state 25

   22 identifier_list: identifier .

    $default  reduce using rule 22 (identifier_list)


state 26

   11 var_decl: scalar_type identifier_list . SEMICOLON
   21 identifier_list: identifier_list . ',' identifier
   23                | identifier_list . ',' ID '=' expression
   25                | identifier_list . ',' ID array_int '=' initial_array

    SEMICOLON  shift, and go to state 36
    ','        shift, and go to state 37


state 27

   29 const_list: ID . '=' literal_const ',' const_list
   30           | ID . '=' literal_const

    '='  shift, and go to state 38


state 28

   28 const_decl: CONST scalar_type const_list . SEMICOLON

    SEMICOLON  shift, and go to state 39


state 29

   36 funct_decl: VOID ID '(' . arguments ')' SEMICOLON
   38 funct_defi: VOID ID '(' . arguments ')' compound

    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    $default  reduce using rule 40 (arguments)

    scalar_type         go to state 40
    arguments           go to state 41
    nonempty_arguments  go to state 42
    argument            go to state 43


state 30

    4 decl_and_def_list_mustdef: declaration_list decl_and_def_list_mustdef .

    $default  reduce using rule 4 (decl_and_def_list_mustdef)


state 31

    5 decl_and_def_list_mustdef: definition_list decl_and_def_list_mustdef .

    $default  reduce using rule 5 (decl_and_def_list_mustdef)


state 32

   19 array_int: '[' . INTEGER ']'
   20          | '[' . INTEGER ']' array_int

    INTEGER  shift, and go to state 44


state 33

   24 identifier_list: ID '=' . expression

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 55
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 34

   35 funct_decl: scalar_type ID '(' . arguments ')' SEMICOLON
   37 funct_defi: scalar_type ID '(' . arguments ')' compound

    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    $default  reduce using rule 40 (arguments)

    scalar_type         go to state 40
    arguments           go to state 58
    nonempty_arguments  go to state 42
    argument            go to state 43


state 35

   18 identifier: ID array_int .
   26 identifier_list: ID array_int . '=' initial_array

    '='  shift, and go to state 59

    $default  reduce using rule 18 (identifier)


state 36

   11 var_decl: scalar_type identifier_list SEMICOLON .

    $default  reduce using rule 11 (var_decl)


state 37

   21 identifier_list: identifier_list ',' . identifier
   23                | identifier_list ',' . ID '=' expression
   25                | identifier_list ',' . ID array_int '=' initial_array

    ID  shift, and go to state 60

    identifier  go to state 61


state 38

   29 const_list: ID '=' . literal_const ',' const_list
   30           | ID '=' . literal_const

    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49

    literal_const  go to state 62


state 39

   28 const_decl: CONST scalar_type const_list SEMICOLON .

    $default  reduce using rule 28 (const_decl)


state 40

   43 argument: scalar_type . identifier

    ID  shift, and go to state 63

    identifier  go to state 64


state 41

   36 funct_decl: VOID ID '(' arguments . ')' SEMICOLON
   38 funct_defi: VOID ID '(' arguments . ')' compound

    ')'  shift, and go to state 65


state 42

   39 arguments: nonempty_arguments .
   41 nonempty_arguments: nonempty_arguments . ',' argument

    ','  shift, and go to state 66

    $default  reduce using rule 39 (arguments)


state 43

   42 nonempty_arguments: argument .

    $default  reduce using rule 42 (nonempty_arguments)


state 44

   19 array_int: '[' INTEGER . ']'
   20          | '[' INTEGER . ']' array_int

    ']'  shift, and go to state 67


state 45

   62 array_reference: ID . array_expre
   71 expression_component: ID .
  105 funciton_invocation: ID . '(' expression_list ')' SEMICOLON

    '['  shift, and go to state 68
    '('  shift, and go to state 69

    $default  reduce using rule 71 (expression_component)

    array_expre  go to state 70


state 46

   34 literal_const: SCIENTIFIC .

    $default  reduce using rule 34 (literal_const)


state 47

   31 literal_const: INTEGER .

    $default  reduce using rule 31 (literal_const)


state 48

   32 literal_const: FLOATCONST .

    $default  reduce using rule 32 (literal_const)


state 49

   33 literal_const: STRINGCONST .

    $default  reduce using rule 33 (literal_const)


state 50

   69 expression: '-' . expression

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 71
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 51

   68 expression: '!' . expression

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 72
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 52

   67 expression: '(' . expression ')'

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 73
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 53

   70 expression_component: literal_const .

    $default  reduce using rule 70 (expression_component)


state 54

   73 expression_component: array_reference .

    $default  reduce using rule 73 (expression_component)


state 55

   24 identifier_list: ID '=' expression .

    $default  reduce using rule 24 (identifier_list)


state 56

   65 expression: expression_component .
   66           | expression_component . operator expression

    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '<'  shift, and go to state 79
    '>'  shift, and go to state 80
    NE   shift, and go to state 81
    GE   shift, and go to state 82
    EQ   shift, and go to state 83
    LE   shift, and go to state 84
    AND  shift, and go to state 85
    OR   shift, and go to state 86

    $default  reduce using rule 65 (expression)

    operator  go to state 87
    logical   go to state 88


state 57

   72 expression_component: funciton_invocation .

    $default  reduce using rule 72 (expression_component)


state 58

   35 funct_decl: scalar_type ID '(' arguments . ')' SEMICOLON
   37 funct_defi: scalar_type ID '(' arguments . ')' compound

    ')'  shift, and go to state 89


state 59

   26 identifier_list: ID array_int '=' . initial_array

    '{'  shift, and go to state 90

    initial_array  go to state 91


state 60

   17 identifier: ID .
   18           | ID . array_int
   23 identifier_list: identifier_list ',' ID . '=' expression
   25                | identifier_list ',' ID . array_int '=' initial_array

    '['  shift, and go to state 32
    '='  shift, and go to state 92

    $default  reduce using rule 17 (identifier)

    array_int  go to state 93


state 61

   21 identifier_list: identifier_list ',' identifier .

    $default  reduce using rule 21 (identifier_list)


state 62

   29 const_list: ID '=' literal_const . ',' const_list
   30           | ID '=' literal_const .

    ','  shift, and go to state 94

    $default  reduce using rule 30 (const_list)


state 63

   17 identifier: ID .
   18           | ID . array_int

    '['  shift, and go to state 32

    $default  reduce using rule 17 (identifier)

    array_int  go to state 95


state 64

   43 argument: scalar_type identifier .

    $default  reduce using rule 43 (argument)


state 65

   36 funct_decl: VOID ID '(' arguments ')' . SEMICOLON
   38 funct_defi: VOID ID '(' arguments ')' . compound

    SEMICOLON  shift, and go to state 96
    '{'        shift, and go to state 97

    compound  go to state 98


state 66

   41 nonempty_arguments: nonempty_arguments ',' . argument

    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    scalar_type  go to state 40
    argument     go to state 99


state 67

   19 array_int: '[' INTEGER ']' .
   20          | '[' INTEGER ']' . array_int

    '['  shift, and go to state 32

    $default  reduce using rule 19 (array_int)

    array_int  go to state 100


state 68

   63 array_expre: '[' . expression ']' array_expre
   64            | '[' . expression ']'

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 101
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 69

  105 funciton_invocation: ID '(' . expression_list ')' SEMICOLON

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    $default  reduce using rule 108 (expression_list)

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 102
    expression_component  go to state 56
    funciton_invocation   go to state 57
    expression_list       go to state 103


state 70

   62 array_reference: ID array_expre .

    $default  reduce using rule 62 (array_reference)


state 71

   69 expression: '-' expression .

    $default  reduce using rule 69 (expression)


state 72

   68 expression: '!' expression .

    $default  reduce using rule 68 (expression)


state 73

   67 expression: '(' expression . ')'

    ')'  shift, and go to state 104


state 74

   75 operator: '*' .

    $default  reduce using rule 75 (operator)


state 75

   76 operator: '/' .

    $default  reduce using rule 76 (operator)


state 76

   77 operator: '%' .

    $default  reduce using rule 77 (operator)


state 77

   78 operator: '+' .

    $default  reduce using rule 78 (operator)


state 78

   74 operator: '-' .

    $default  reduce using rule 74 (operator)


state 79

   82 logical: '<' .

    $default  reduce using rule 82 (logical)


state 80

   83 logical: '>' .

    $default  reduce using rule 83 (logical)


state 81

   87 logical: NE .

    $default  reduce using rule 87 (logical)


state 82

   86 logical: GE .

    $default  reduce using rule 86 (logical)


state 83

   85 logical: EQ .

    $default  reduce using rule 85 (logical)


state 84

   84 logical: LE .

    $default  reduce using rule 84 (logical)


state 85

   80 operator: AND .

    $default  reduce using rule 80 (operator)


state 86

   81 operator: OR .

    $default  reduce using rule 81 (operator)


state 87

   66 expression: expression_component operator . expression

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 105
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 88

   79 operator: logical .

    $default  reduce using rule 79 (operator)


state 89

   35 funct_decl: scalar_type ID '(' arguments ')' . SEMICOLON
   37 funct_defi: scalar_type ID '(' arguments ')' . compound

    SEMICOLON  shift, and go to state 106
    '{'        shift, and go to state 97

    compound  go to state 107


state 90

   27 initial_array: '{' . expression_list '}'

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    $default  reduce using rule 108 (expression_list)

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 102
    expression_component  go to state 56
    funciton_invocation   go to state 57
    expression_list       go to state 108


state 91

   26 identifier_list: ID array_int '=' initial_array .

    $default  reduce using rule 26 (identifier_list)


state 92

   23 identifier_list: identifier_list ',' ID '=' . expression

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 109
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 93

   18 identifier: ID array_int .
   25 identifier_list: identifier_list ',' ID array_int . '=' initial_array

    '='  shift, and go to state 110

    $default  reduce using rule 18 (identifier)


state 94

   29 const_list: ID '=' literal_const ',' . const_list

    ID  shift, and go to state 27

    const_list  go to state 111


state 95

   18 identifier: ID array_int .

    $default  reduce using rule 18 (identifier)


state 96

   36 funct_decl: VOID ID '(' arguments ')' SEMICOLON .

    $default  reduce using rule 36 (funct_decl)


state 97

   51 compound: '{' . compound_list '}'

    ID        shift, and go to state 112
    CONST     shift, and go to state 1
    BOOL      shift, and go to state 2
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    STRING    shift, and go to state 6
    INT       shift, and go to state 7
    READ      shift, and go to state 113
    PRINT     shift, and go to state 114
    WHILE     shift, and go to state 115
    DO        shift, and go to state 116
    IF        shift, and go to state 117
    FOR       shift, and go to state 118
    CONTINUE  shift, and go to state 119
    BREAK     shift, and go to state 120
    RETURN    shift, and go to state 121
    '{'       shift, and go to state 97

    $default  reduce using rule 55 (compound_list)

    var_decl             go to state 122
    scalar_type          go to state 123
    const_decl           go to state 124
    statement            go to state 125
    compound             go to state 126
    compound_list        go to state 127
    simple               go to state 128
    variable_reference   go to state 129
    array_reference      go to state 130
    conditional          go to state 131
    while                go to state 132
    for                  go to state 133
    jump                 go to state 134
    procedure_call       go to state 135
    funciton_invocation  go to state 136


state 98

   38 funct_defi: VOID ID '(' arguments ')' compound .

    $default  reduce using rule 38 (funct_defi)


state 99

   41 nonempty_arguments: nonempty_arguments ',' argument .

    $default  reduce using rule 41 (nonempty_arguments)


state 100

   20 array_int: '[' INTEGER ']' array_int .

    $default  reduce using rule 20 (array_int)


state 101

   63 array_expre: '[' expression . ']' array_expre
   64            | '[' expression . ']'

    ']'  shift, and go to state 137


state 102

  106 expression_list: expression . ',' expression_list
  107                | expression .

    ','  shift, and go to state 138

    $default  reduce using rule 107 (expression_list)


state 103

  105 funciton_invocation: ID '(' expression_list . ')' SEMICOLON

    ')'  shift, and go to state 139


state 104

   67 expression: '(' expression ')' .

    $default  reduce using rule 67 (expression)


state 105

   66 expression: expression_component operator expression .

    $default  reduce using rule 66 (expression)


state 106

   35 funct_decl: scalar_type ID '(' arguments ')' SEMICOLON .

    $default  reduce using rule 35 (funct_decl)


state 107

   37 funct_defi: scalar_type ID '(' arguments ')' compound .

    $default  reduce using rule 37 (funct_defi)


state 108

   27 initial_array: '{' expression_list . '}'

    '}'  shift, and go to state 140


state 109

   23 identifier_list: identifier_list ',' ID '=' expression .

    $default  reduce using rule 23 (identifier_list)


state 110

   25 identifier_list: identifier_list ',' ID array_int '=' . initial_array

    '{'  shift, and go to state 90

    initial_array  go to state 141


state 111

   29 const_list: ID '=' literal_const ',' const_list .

    $default  reduce using rule 29 (const_list)


state 112

   60 variable_reference: ID .
   62 array_reference: ID . array_expre
  105 funciton_invocation: ID . '(' expression_list ')' SEMICOLON

    '['  shift, and go to state 68
    '('  shift, and go to state 69

    $default  reduce using rule 60 (variable_reference)

    array_expre  go to state 70


state 113

   59 simple: READ . variable_reference

    ID  shift, and go to state 142

    variable_reference  go to state 143
    array_reference     go to state 130


state 114

   57 simple: PRINT . variable_reference SEMICOLON
   58       | PRINT . expression SEMICOLON

    ID           shift, and go to state 144
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    variable_reference    go to state 145
    array_reference       go to state 146
    expression            go to state 147
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 115

   90 while: WHILE . '(' boolean_expression ')' compound

    '('  shift, and go to state 148


state 116

   91 while: DO . compound WHILE '(' boolean_expression ')'

    '{'  shift, and go to state 97

    compound  go to state 149


state 117

   88 conditional: IF . '(' boolean_expression ')' compound ELSE compound
   89            | IF . '(' boolean_expression ')' compound

    '('  shift, and go to state 150


state 118

   93 for: FOR . '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')'

    '('  shift, and go to state 151


state 119

  103 jump: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 152


state 120

  102 jump: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 153


state 121

  101 jump: RETURN . expression SEMICOLON

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 154
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 122

   52 compound_list: var_decl . compound_list

    ID        shift, and go to state 112
    CONST     shift, and go to state 1
    BOOL      shift, and go to state 2
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    STRING    shift, and go to state 6
    INT       shift, and go to state 7
    READ      shift, and go to state 113
    PRINT     shift, and go to state 114
    WHILE     shift, and go to state 115
    DO        shift, and go to state 116
    IF        shift, and go to state 117
    FOR       shift, and go to state 118
    CONTINUE  shift, and go to state 119
    BREAK     shift, and go to state 120
    RETURN    shift, and go to state 121
    '{'       shift, and go to state 97

    $default  reduce using rule 55 (compound_list)

    var_decl             go to state 122
    scalar_type          go to state 123
    const_decl           go to state 124
    statement            go to state 125
    compound             go to state 126
    compound_list        go to state 155
    simple               go to state 128
    variable_reference   go to state 129
    array_reference      go to state 130
    conditional          go to state 131
    while                go to state 132
    for                  go to state 133
    jump                 go to state 134
    procedure_call       go to state 135
    funciton_invocation  go to state 136


state 123

   11 var_decl: scalar_type . identifier_list SEMICOLON

    ID  shift, and go to state 156

    identifier       go to state 25
    identifier_list  go to state 26


state 124

   53 compound_list: const_decl . compound_list

    ID        shift, and go to state 112
    CONST     shift, and go to state 1
    BOOL      shift, and go to state 2
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    STRING    shift, and go to state 6
    INT       shift, and go to state 7
    READ      shift, and go to state 113
    PRINT     shift, and go to state 114
    WHILE     shift, and go to state 115
    DO        shift, and go to state 116
    IF        shift, and go to state 117
    FOR       shift, and go to state 118
    CONTINUE  shift, and go to state 119
    BREAK     shift, and go to state 120
    RETURN    shift, and go to state 121
    '{'       shift, and go to state 97

    $default  reduce using rule 55 (compound_list)

    var_decl             go to state 122
    scalar_type          go to state 123
    const_decl           go to state 124
    statement            go to state 125
    compound             go to state 126
    compound_list        go to state 157
    simple               go to state 128
    variable_reference   go to state 129
    array_reference      go to state 130
    conditional          go to state 131
    while                go to state 132
    for                  go to state 133
    jump                 go to state 134
    procedure_call       go to state 135
    funciton_invocation  go to state 136


state 125

   54 compound_list: statement . compound_list

    ID        shift, and go to state 112
    CONST     shift, and go to state 1
    BOOL      shift, and go to state 2
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    STRING    shift, and go to state 6
    INT       shift, and go to state 7
    READ      shift, and go to state 113
    PRINT     shift, and go to state 114
    WHILE     shift, and go to state 115
    DO        shift, and go to state 116
    IF        shift, and go to state 117
    FOR       shift, and go to state 118
    CONTINUE  shift, and go to state 119
    BREAK     shift, and go to state 120
    RETURN    shift, and go to state 121
    '{'       shift, and go to state 97

    $default  reduce using rule 55 (compound_list)

    var_decl             go to state 122
    scalar_type          go to state 123
    const_decl           go to state 124
    statement            go to state 125
    compound             go to state 126
    compound_list        go to state 158
    simple               go to state 128
    variable_reference   go to state 129
    array_reference      go to state 130
    conditional          go to state 131
    while                go to state 132
    for                  go to state 133
    jump                 go to state 134
    procedure_call       go to state 135
    funciton_invocation  go to state 136


state 126

   44 statement: compound .

    $default  reduce using rule 44 (statement)


state 127

   51 compound: '{' compound_list . '}'

    '}'  shift, and go to state 159


state 128

   45 statement: simple .

    $default  reduce using rule 45 (statement)


state 129

   56 simple: variable_reference . '=' expression SEMICOLON

    '='  shift, and go to state 160


state 130

   61 variable_reference: array_reference .

    $default  reduce using rule 61 (variable_reference)


state 131

   46 statement: conditional .

    $default  reduce using rule 46 (statement)


state 132

   47 statement: while .

    $default  reduce using rule 47 (statement)


state 133

   48 statement: for .

    $default  reduce using rule 48 (statement)


state 134

   49 statement: jump .

    $default  reduce using rule 49 (statement)


state 135

   50 statement: procedure_call .

    $default  reduce using rule 50 (statement)


state 136

  104 procedure_call: funciton_invocation .

    $default  reduce using rule 104 (procedure_call)


state 137

   63 array_expre: '[' expression ']' . array_expre
   64            | '[' expression ']' .

    '['  shift, and go to state 68

    $default  reduce using rule 64 (array_expre)

    array_expre  go to state 161


state 138

  106 expression_list: expression ',' . expression_list

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    $default  reduce using rule 108 (expression_list)

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 102
    expression_component  go to state 56
    funciton_invocation   go to state 57
    expression_list       go to state 162


state 139

  105 funciton_invocation: ID '(' expression_list ')' . SEMICOLON

    SEMICOLON  shift, and go to state 163


state 140

   27 initial_array: '{' expression_list '}' .

    $default  reduce using rule 27 (initial_array)


state 141

   25 identifier_list: identifier_list ',' ID array_int '=' initial_array .

    $default  reduce using rule 25 (identifier_list)


state 142

   60 variable_reference: ID .
   62 array_reference: ID . array_expre

    '['  shift, and go to state 68

    $default  reduce using rule 60 (variable_reference)

    array_expre  go to state 70


state 143

   59 simple: READ variable_reference .

    $default  reduce using rule 59 (simple)


state 144

   60 variable_reference: ID .
   62 array_reference: ID . array_expre
   71 expression_component: ID .
  105 funciton_invocation: ID . '(' expression_list ')' SEMICOLON

    '['  shift, and go to state 68
    '('  shift, and go to state 69

    SEMICOLON  reduce using rule 60 (variable_reference)
    SEMICOLON  [reduce using rule 71 (expression_component)]
    $default   reduce using rule 71 (expression_component)

    array_expre  go to state 70


state 145

   57 simple: PRINT variable_reference . SEMICOLON

    SEMICOLON  shift, and go to state 164


state 146

   61 variable_reference: array_reference .
   73 expression_component: array_reference .

    SEMICOLON  reduce using rule 61 (variable_reference)
    SEMICOLON  [reduce using rule 73 (expression_component)]
    $default   reduce using rule 73 (expression_component)


state 147

   58 simple: PRINT expression . SEMICOLON

    SEMICOLON  shift, and go to state 165


state 148

   90 while: WHILE '(' . boolean_expression ')' compound

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 166
    expression_component  go to state 56
    boolean_expression    go to state 167
    funciton_invocation   go to state 57


state 149

   91 while: DO compound . WHILE '(' boolean_expression ')'

    WHILE  shift, and go to state 168


state 150

   88 conditional: IF '(' . boolean_expression ')' compound ELSE compound
   89            | IF '(' . boolean_expression ')' compound

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 166
    expression_component  go to state 56
    boolean_expression    go to state 169
    funciton_invocation   go to state 57


state 151

   93 for: FOR '(' . initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')'

    ID      shift, and go to state 170
    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 4
    DOUBLE  shift, and go to state 5
    STRING  shift, and go to state 6
    INT     shift, and go to state 7

    $default  reduce using rule 96 (initial_expression)

    scalar_type         go to state 171
    initial_expression  go to state 172


state 152

  103 jump: CONTINUE SEMICOLON .

    $default  reduce using rule 103 (jump)


state 153

  102 jump: BREAK SEMICOLON .

    $default  reduce using rule 102 (jump)


state 154

  101 jump: RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 173


state 155

   52 compound_list: var_decl compound_list .

    $default  reduce using rule 52 (compound_list)


state 156

   17 identifier: ID .
   18           | ID . array_int
   24 identifier_list: ID . '=' expression
   26                | ID . array_int '=' initial_array

    '['  shift, and go to state 32
    '='  shift, and go to state 33

    $default  reduce using rule 17 (identifier)

    array_int  go to state 35


state 157

   53 compound_list: const_decl compound_list .

    $default  reduce using rule 53 (compound_list)


state 158

   54 compound_list: statement compound_list .

    $default  reduce using rule 54 (compound_list)


state 159

   51 compound: '{' compound_list '}' .

    $default  reduce using rule 51 (compound)


state 160

   56 simple: variable_reference '=' . expression SEMICOLON

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 174
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 161

   63 array_expre: '[' expression ']' array_expre .

    $default  reduce using rule 63 (array_expre)


state 162

  106 expression_list: expression ',' expression_list .

    $default  reduce using rule 106 (expression_list)


state 163

  105 funciton_invocation: ID '(' expression_list ')' SEMICOLON .

    $default  reduce using rule 105 (funciton_invocation)


state 164

   57 simple: PRINT variable_reference SEMICOLON .

    $default  reduce using rule 57 (simple)


state 165

   58 simple: PRINT expression SEMICOLON .

    $default  reduce using rule 58 (simple)


state 166

   92 boolean_expression: expression .

    $default  reduce using rule 92 (boolean_expression)


state 167

   90 while: WHILE '(' boolean_expression . ')' compound

    ')'  shift, and go to state 175


state 168

   91 while: DO compound WHILE . '(' boolean_expression ')'

    '('  shift, and go to state 176


state 169

   88 conditional: IF '(' boolean_expression . ')' compound ELSE compound
   89            | IF '(' boolean_expression . ')' compound

    ')'  shift, and go to state 177


state 170

   94 initial_expression: ID . '=' expression

    '='  shift, and go to state 178


state 171

   95 initial_expression: scalar_type . ID '=' expression

    ID  shift, and go to state 179


state 172

   93 for: FOR '(' initial_expression . SEMICOLON control_expression SEMICOLON increment_expression ')'

    SEMICOLON  shift, and go to state 180


state 173

  101 jump: RETURN expression SEMICOLON .

    $default  reduce using rule 101 (jump)


state 174

   56 simple: variable_reference '=' expression . SEMICOLON

    SEMICOLON  shift, and go to state 181


state 175

   90 while: WHILE '(' boolean_expression ')' . compound

    '{'  shift, and go to state 97

    compound  go to state 182


state 176

   91 while: DO compound WHILE '(' . boolean_expression ')'

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 166
    expression_component  go to state 56
    boolean_expression    go to state 183
    funciton_invocation   go to state 57


state 177

   88 conditional: IF '(' boolean_expression ')' . compound ELSE compound
   89            | IF '(' boolean_expression ')' . compound

    '{'  shift, and go to state 97

    compound  go to state 184


state 178

   94 initial_expression: ID '=' . expression

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 185
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 179

   95 initial_expression: scalar_type ID . '=' expression

    '='  shift, and go to state 186


state 180

   93 for: FOR '(' initial_expression SEMICOLON . control_expression SEMICOLON increment_expression ')'

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    $default  reduce using rule 98 (control_expression)

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 187
    expression_component  go to state 56
    control_expression    go to state 188
    funciton_invocation   go to state 57


state 181

   56 simple: variable_reference '=' expression SEMICOLON .

    $default  reduce using rule 56 (simple)


state 182

   90 while: WHILE '(' boolean_expression ')' compound .

    $default  reduce using rule 90 (while)


state 183

   91 while: DO compound WHILE '(' boolean_expression . ')'

    ')'  shift, and go to state 189


state 184

   88 conditional: IF '(' boolean_expression ')' compound . ELSE compound
   89            | IF '(' boolean_expression ')' compound .

    ELSE  shift, and go to state 190

    $default  reduce using rule 89 (conditional)


state 185

   94 initial_expression: ID '=' expression .

    $default  reduce using rule 94 (initial_expression)


state 186

   95 initial_expression: scalar_type ID '=' . expression

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 191
    expression_component  go to state 56
    funciton_invocation   go to state 57


state 187

   97 control_expression: expression .

    $default  reduce using rule 97 (control_expression)


state 188

   93 for: FOR '(' initial_expression SEMICOLON control_expression . SEMICOLON increment_expression ')'

    SEMICOLON  shift, and go to state 192


state 189

   91 while: DO compound WHILE '(' boolean_expression ')' .

    $default  reduce using rule 91 (while)


state 190

   88 conditional: IF '(' boolean_expression ')' compound ELSE . compound

    '{'  shift, and go to state 97

    compound  go to state 193


state 191

   95 initial_expression: scalar_type ID '=' expression .

    $default  reduce using rule 95 (initial_expression)


state 192

   93 for: FOR '(' initial_expression SEMICOLON control_expression SEMICOLON . increment_expression ')'

    ID           shift, and go to state 45
    SCIENTIFIC   shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOATCONST   shift, and go to state 48
    STRINGCONST  shift, and go to state 49
    '-'          shift, and go to state 50
    '!'          shift, and go to state 51
    '('          shift, and go to state 52

    $default  reduce using rule 100 (increment_expression)

    literal_const         go to state 53
    array_reference       go to state 54
    expression            go to state 194
    expression_component  go to state 56
    increment_expression  go to state 195
    funciton_invocation   go to state 57


state 193

   88 conditional: IF '(' boolean_expression ')' compound ELSE compound .

    $default  reduce using rule 88 (conditional)


state 194

   99 increment_expression: expression .

    $default  reduce using rule 99 (increment_expression)


state 195

   93 for: FOR '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression . ')'

    ')'  shift, and go to state 196


state 196

   93 for: FOR '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')' .

    $default  reduce using rule 93 (for)
