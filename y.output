   0  $accept : program $end

   1  program : decl_and_def_list

   2  decl_and_def_list : declaration_list decl_and_def_list
   3                    | definition_list decl_and_def_list_mustdef

   4  decl_and_def_list_mustdef : declaration_list decl_and_def_list_mustdef
   5                            | definition_list decl_and_def_list_mustdef
   6                            |

   7  declaration_list : const_decl
   8                   | var_decl
   9                   | funct_decl

  10  definition_list : funct_defi

  11  var_decl : scalar_type identifier_list SEMICOLON

  12  scalar_type : INT
  13              | FLOAT
  14              | BOOL
  15              | DOUBLE
  16              | STRING

  17  identifier : ID
  18             | ID array_int

  19  array_int : '[' INTEGER ']'
  20            | '[' INTEGER ']' array_int

  21  identifier_list : identifier_list ',' identifier
  22                  | identifier
  23                  | identifier_list ',' ID '=' expression
  24                  | ID '=' expression
  25                  | identifier_list ',' ID array_int '=' initial_array
  26                  | ID array_int '=' initial_array

  27  initial_array : '{' expression_list '}'

  28  const_decl : CONST scalar_type const_list SEMICOLON

  29  const_list : ID '=' literal_const ',' const_list
  30             | ID '=' literal_const

  31  literal_const : INTEGER
  32                | FLOATCONST
  33                | STRINGCONST
  34                | SCIENTIFIC
  35                | TRUE
  36                | FALSE

  37  funct_decl : scalar_type ID '(' arguments ')' SEMICOLON
  38             | VOID ID '(' arguments ')' SEMICOLON

  39  funct_defi : scalar_type ID '(' arguments ')' compound
  40             | VOID ID '(' arguments ')' compound

  41  arguments : nonempty_arguments
  42            |

  43  nonempty_arguments : nonempty_arguments ',' argument
  44                     | argument

  45  argument : scalar_type identifier

  46  statement : compound
  47            | simple
  48            | conditional
  49            | while
  50            | for
  51            | jump
  52            | procedure_call

  53  compound : '{' compound_list '}'

  54  compound_list : var_decl compound_list
  55                | const_decl compound_list
  56                | statement compound_list
  57                |

  58  simple : variable_reference '=' expression SEMICOLON
  59         | PRINT variable_reference SEMICOLON
  60         | PRINT expression SEMICOLON
  61         | READ variable_reference

  62  variable_reference : ID
  63                     | array_reference

  64  array_reference : ID array_expre

  65  array_expre : '[' expression ']' array_expre
  66              | '[' expression ']'

  67  expression : expression_component
  68             | expression_component operator '(' expression ')'
  69             | expression_component operator expression
  70             | '(' expression ')'
  71             | '!' expression
  72             | '-' expression

  73  expression_component : literal_const
  74                       | ID
  75                       | funciton_invocation
  76                       | array_reference

  77  operator : '-'
  78           | '*'
  79           | '/'
  80           | '%'
  81           | '+'
  82           | logical
  83           | AND
  84           | OR

  85  logical : '<'
  86          | '>'
  87          | LE
  88          | EQ
  89          | GE
  90          | NE

  91  conditional : IF '(' boolean_expression ')' compound ELSE compound
  92              | IF '(' boolean_expression ')' compound

  93  while : WHILE '(' boolean_expression ')' compound
  94        | DO compound WHILE '(' boolean_expression ')' SEMICOLON

  95  boolean_expression : expression

  96  for : FOR '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')'

  97  initial_expression : ID '=' expression
  98                     | scalar_type ID '=' expression
  99                     |

 100  control_expression : expression
 101                     |

 102  increment_expression : expression
 103                       |

 104  jump : RETURN expression SEMICOLON
 105       | BREAK SEMICOLON
 106       | CONTINUE SEMICOLON

 107  procedure_call : funciton_invocation

 108  funciton_invocation : ID '(' expression_list ')' SEMICOLON

 109  expression_list : expression ',' expression_list
 110                  | expression
 111                  |

state 0
	$accept : . program $end  (0)

	CONST  shift 1
	BOOL  shift 2
	VOID  shift 3
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	.  error

	program  goto 8
	decl_and_def_list  goto 9
	declaration_list  goto 10
	definition_list  goto 11
	const_decl  goto 12
	var_decl  goto 13
	funct_decl  goto 14
	funct_defi  goto 15
	scalar_type  goto 16


state 1
	const_decl : CONST . scalar_type const_list SEMICOLON  (28)

	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	.  error

	scalar_type  goto 17


state 2
	scalar_type : BOOL .  (14)

	.  reduce 14


state 3
	funct_decl : VOID . ID '(' arguments ')' SEMICOLON  (38)
	funct_defi : VOID . ID '(' arguments ')' compound  (40)

	ID  shift 18
	.  error


state 4
	scalar_type : FLOAT .  (13)

	.  reduce 13


state 5
	scalar_type : DOUBLE .  (15)

	.  reduce 15


state 6
	scalar_type : STRING .  (16)

	.  reduce 16


state 7
	scalar_type : INT .  (12)

	.  reduce 12


state 8
	$accept : program . $end  (0)

	$end  accept


state 9
	program : decl_and_def_list .  (1)

	.  reduce 1


state 10
	decl_and_def_list : declaration_list . decl_and_def_list  (2)

	CONST  shift 1
	BOOL  shift 2
	VOID  shift 3
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	.  error

	decl_and_def_list  goto 19
	declaration_list  goto 10
	definition_list  goto 11
	const_decl  goto 12
	var_decl  goto 13
	funct_decl  goto 14
	funct_defi  goto 15
	scalar_type  goto 16


state 11
	decl_and_def_list : definition_list . decl_and_def_list_mustdef  (3)
	decl_and_def_list_mustdef : .  (6)

	CONST  shift 1
	BOOL  shift 2
	VOID  shift 3
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	$end  reduce 6

	declaration_list  goto 20
	definition_list  goto 21
	decl_and_def_list_mustdef  goto 22
	const_decl  goto 12
	var_decl  goto 13
	funct_decl  goto 14
	funct_defi  goto 15
	scalar_type  goto 16


state 12
	declaration_list : const_decl .  (7)

	.  reduce 7


state 13
	declaration_list : var_decl .  (8)

	.  reduce 8


state 14
	declaration_list : funct_decl .  (9)

	.  reduce 9


state 15
	definition_list : funct_defi .  (10)

	.  reduce 10


state 16
	var_decl : scalar_type . identifier_list SEMICOLON  (11)
	funct_decl : scalar_type . ID '(' arguments ')' SEMICOLON  (37)
	funct_defi : scalar_type . ID '(' arguments ')' compound  (39)

	ID  shift 23
	.  error

	identifier_list  goto 24
	identifier  goto 25


state 17
	const_decl : CONST scalar_type . const_list SEMICOLON  (28)

	ID  shift 26
	.  error

	const_list  goto 27


state 18
	funct_decl : VOID ID . '(' arguments ')' SEMICOLON  (38)
	funct_defi : VOID ID . '(' arguments ')' compound  (40)

	'('  shift 28
	.  error


state 19
	decl_and_def_list : declaration_list decl_and_def_list .  (2)

	.  reduce 2


state 20
	decl_and_def_list_mustdef : declaration_list . decl_and_def_list_mustdef  (4)
	decl_and_def_list_mustdef : .  (6)

	CONST  shift 1
	BOOL  shift 2
	VOID  shift 3
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	$end  reduce 6

	declaration_list  goto 20
	definition_list  goto 21
	decl_and_def_list_mustdef  goto 29
	const_decl  goto 12
	var_decl  goto 13
	funct_decl  goto 14
	funct_defi  goto 15
	scalar_type  goto 16


state 21
	decl_and_def_list_mustdef : definition_list . decl_and_def_list_mustdef  (5)
	decl_and_def_list_mustdef : .  (6)

	CONST  shift 1
	BOOL  shift 2
	VOID  shift 3
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	$end  reduce 6

	declaration_list  goto 20
	definition_list  goto 21
	decl_and_def_list_mustdef  goto 30
	const_decl  goto 12
	var_decl  goto 13
	funct_decl  goto 14
	funct_defi  goto 15
	scalar_type  goto 16


state 22
	decl_and_def_list : definition_list decl_and_def_list_mustdef .  (3)

	.  reduce 3


state 23
	identifier : ID .  (17)
	identifier : ID . array_int  (18)
	identifier_list : ID . '=' expression  (24)
	identifier_list : ID . array_int '=' initial_array  (26)
	funct_decl : scalar_type ID . '(' arguments ')' SEMICOLON  (37)
	funct_defi : scalar_type ID . '(' arguments ')' compound  (39)

	'['  shift 31
	'='  shift 32
	'('  shift 33
	SEMICOLON  reduce 17
	','  reduce 17

	array_int  goto 34


state 24
	var_decl : scalar_type identifier_list . SEMICOLON  (11)
	identifier_list : identifier_list . ',' identifier  (21)
	identifier_list : identifier_list . ',' ID '=' expression  (23)
	identifier_list : identifier_list . ',' ID array_int '=' initial_array  (25)

	SEMICOLON  shift 35
	','  shift 36
	.  error


state 25
	identifier_list : identifier .  (22)

	.  reduce 22


state 26
	const_list : ID . '=' literal_const ',' const_list  (29)
	const_list : ID . '=' literal_const  (30)

	'='  shift 37
	.  error


state 27
	const_decl : CONST scalar_type const_list . SEMICOLON  (28)

	SEMICOLON  shift 38
	.  error


state 28
	funct_decl : VOID ID '(' . arguments ')' SEMICOLON  (38)
	funct_defi : VOID ID '(' . arguments ')' compound  (40)
	arguments : .  (42)

	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	')'  reduce 42

	scalar_type  goto 39
	arguments  goto 40
	nonempty_arguments  goto 41
	argument  goto 42


state 29
	decl_and_def_list_mustdef : declaration_list decl_and_def_list_mustdef .  (4)

	.  reduce 4


state 30
	decl_and_def_list_mustdef : definition_list decl_and_def_list_mustdef .  (5)

	.  reduce 5


state 31
	array_int : '[' . INTEGER ']'  (19)
	array_int : '[' . INTEGER ']' array_int  (20)

	INTEGER  shift 43
	.  error


state 32
	identifier_list : ID '=' . expression  (24)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 54
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 33
	funct_decl : scalar_type ID '(' . arguments ')' SEMICOLON  (37)
	funct_defi : scalar_type ID '(' . arguments ')' compound  (39)
	arguments : .  (42)

	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	')'  reduce 42

	scalar_type  goto 39
	arguments  goto 59
	nonempty_arguments  goto 41
	argument  goto 42


state 34
	identifier : ID array_int .  (18)
	identifier_list : ID array_int . '=' initial_array  (26)

	'='  shift 60
	SEMICOLON  reduce 18
	','  reduce 18


state 35
	var_decl : scalar_type identifier_list SEMICOLON .  (11)

	.  reduce 11


state 36
	identifier_list : identifier_list ',' . identifier  (21)
	identifier_list : identifier_list ',' . ID '=' expression  (23)
	identifier_list : identifier_list ',' . ID array_int '=' initial_array  (25)

	ID  shift 61
	.  error

	identifier  goto 62


state 37
	const_list : ID '=' . literal_const ',' const_list  (29)
	const_list : ID '=' . literal_const  (30)

	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	.  error

	literal_const  goto 63


state 38
	const_decl : CONST scalar_type const_list SEMICOLON .  (28)

	.  reduce 28


state 39
	argument : scalar_type . identifier  (45)

	ID  shift 64
	.  error

	identifier  goto 65


state 40
	funct_decl : VOID ID '(' arguments . ')' SEMICOLON  (38)
	funct_defi : VOID ID '(' arguments . ')' compound  (40)

	')'  shift 66
	.  error


state 41
	arguments : nonempty_arguments .  (41)
	nonempty_arguments : nonempty_arguments . ',' argument  (43)

	','  shift 67
	')'  reduce 41


state 42
	nonempty_arguments : argument .  (44)

	.  reduce 44


state 43
	array_int : '[' INTEGER . ']'  (19)
	array_int : '[' INTEGER . ']' array_int  (20)

	']'  shift 68
	.  error


state 44
	array_reference : ID . array_expre  (64)
	expression_component : ID .  (74)
	funciton_invocation : ID . '(' expression_list ')' SEMICOLON  (108)

	'['  shift 69
	'('  shift 70
	SEMICOLON  reduce 74
	'*'  reduce 74
	'/'  reduce 74
	'%'  reduce 74
	'+'  reduce 74
	'-'  reduce 74
	'<'  reduce 74
	'>'  reduce 74
	LE  reduce 74
	EQ  reduce 74
	GE  reduce 74
	NE  reduce 74
	AND  reduce 74
	OR  reduce 74
	']'  reduce 74
	','  reduce 74
	'}'  reduce 74
	')'  reduce 74

	array_expre  goto 71


state 45
	literal_const : SCIENTIFIC .  (34)

	.  reduce 34


state 46
	literal_const : INTEGER .  (31)

	.  reduce 31


state 47
	literal_const : FLOATCONST .  (32)

	.  reduce 32


state 48
	literal_const : STRINGCONST .  (33)

	.  reduce 33


state 49
	literal_const : TRUE .  (35)

	.  reduce 35


state 50
	literal_const : FALSE .  (36)

	.  reduce 36


state 51
	expression : '-' . expression  (72)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 72
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 52
	expression : '!' . expression  (71)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 73
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 53
	expression : '(' . expression ')'  (70)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 74
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 54
	identifier_list : ID '=' expression .  (24)

	.  reduce 24


state 55
	expression_component : literal_const .  (73)

	.  reduce 73


state 56
	expression_component : array_reference .  (76)

	.  reduce 76


state 57
	expression : expression_component .  (67)
	expression : expression_component . operator '(' expression ')'  (68)
	expression : expression_component . operator expression  (69)

	'*'  shift 75
	'/'  shift 76
	'%'  shift 77
	'+'  shift 78
	'-'  shift 79
	'<'  shift 80
	'>'  shift 81
	LE  shift 82
	EQ  shift 83
	GE  shift 84
	NE  shift 85
	AND  shift 86
	OR  shift 87
	SEMICOLON  reduce 67
	']'  reduce 67
	','  reduce 67
	'}'  reduce 67
	')'  reduce 67

	operator  goto 88
	logical  goto 89


state 58
	expression_component : funciton_invocation .  (75)

	.  reduce 75


state 59
	funct_decl : scalar_type ID '(' arguments . ')' SEMICOLON  (37)
	funct_defi : scalar_type ID '(' arguments . ')' compound  (39)

	')'  shift 90
	.  error


state 60
	identifier_list : ID array_int '=' . initial_array  (26)

	'{'  shift 91
	.  error

	initial_array  goto 92


state 61
	identifier : ID .  (17)
	identifier : ID . array_int  (18)
	identifier_list : identifier_list ',' ID . '=' expression  (23)
	identifier_list : identifier_list ',' ID . array_int '=' initial_array  (25)

	'['  shift 31
	'='  shift 93
	SEMICOLON  reduce 17
	','  reduce 17

	array_int  goto 94


state 62
	identifier_list : identifier_list ',' identifier .  (21)

	.  reduce 21


state 63
	const_list : ID '=' literal_const . ',' const_list  (29)
	const_list : ID '=' literal_const .  (30)

	','  shift 95
	SEMICOLON  reduce 30


state 64
	identifier : ID .  (17)
	identifier : ID . array_int  (18)

	'['  shift 31
	','  reduce 17
	')'  reduce 17

	array_int  goto 96


state 65
	argument : scalar_type identifier .  (45)

	.  reduce 45


state 66
	funct_decl : VOID ID '(' arguments ')' . SEMICOLON  (38)
	funct_defi : VOID ID '(' arguments ')' . compound  (40)

	SEMICOLON  shift 97
	'{'  shift 98
	.  error

	compound  goto 99


state 67
	nonempty_arguments : nonempty_arguments ',' . argument  (43)

	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	.  error

	scalar_type  goto 39
	argument  goto 100


state 68
	array_int : '[' INTEGER ']' .  (19)
	array_int : '[' INTEGER ']' . array_int  (20)

	'['  shift 31
	SEMICOLON  reduce 19
	','  reduce 19
	'='  reduce 19
	')'  reduce 19

	array_int  goto 101


state 69
	array_expre : '[' . expression ']' array_expre  (65)
	array_expre : '[' . expression ']'  (66)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 102
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 70
	funciton_invocation : ID '(' . expression_list ')' SEMICOLON  (108)
	expression_list : .  (111)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	')'  reduce 111

	expression  goto 103
	expression_list  goto 104
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 71
	array_reference : ID array_expre .  (64)

	.  reduce 64


state 72
	expression : '-' expression .  (72)

	.  reduce 72


state 73
	expression : '!' expression .  (71)

	.  reduce 71


state 74
	expression : '(' expression . ')'  (70)

	')'  shift 105
	.  error


state 75
	operator : '*' .  (78)

	.  reduce 78


state 76
	operator : '/' .  (79)

	.  reduce 79


state 77
	operator : '%' .  (80)

	.  reduce 80


state 78
	operator : '+' .  (81)

	.  reduce 81


state 79
	operator : '-' .  (77)

	.  reduce 77


state 80
	logical : '<' .  (85)

	.  reduce 85


state 81
	logical : '>' .  (86)

	.  reduce 86


state 82
	logical : LE .  (87)

	.  reduce 87


state 83
	logical : EQ .  (88)

	.  reduce 88


state 84
	logical : GE .  (89)

	.  reduce 89


state 85
	logical : NE .  (90)

	.  reduce 90


state 86
	operator : AND .  (83)

	.  reduce 83


state 87
	operator : OR .  (84)

	.  reduce 84


state 88
	expression : expression_component operator . '(' expression ')'  (68)
	expression : expression_component operator . expression  (69)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 106
	.  error

	expression  goto 107
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 89
	operator : logical .  (82)

	.  reduce 82


state 90
	funct_decl : scalar_type ID '(' arguments ')' . SEMICOLON  (37)
	funct_defi : scalar_type ID '(' arguments ')' . compound  (39)

	SEMICOLON  shift 108
	'{'  shift 98
	.  error

	compound  goto 109


state 91
	initial_array : '{' . expression_list '}'  (27)
	expression_list : .  (111)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	'}'  reduce 111

	expression  goto 103
	expression_list  goto 110
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 92
	identifier_list : ID array_int '=' initial_array .  (26)

	.  reduce 26


state 93
	identifier_list : identifier_list ',' ID '=' . expression  (23)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 111
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 94
	identifier : ID array_int .  (18)
	identifier_list : identifier_list ',' ID array_int . '=' initial_array  (25)

	'='  shift 112
	SEMICOLON  reduce 18
	','  reduce 18


state 95
	const_list : ID '=' literal_const ',' . const_list  (29)

	ID  shift 26
	.  error

	const_list  goto 113


state 96
	identifier : ID array_int .  (18)

	.  reduce 18


state 97
	funct_decl : VOID ID '(' arguments ')' SEMICOLON .  (38)

	.  reduce 38


state 98
	compound : '{' . compound_list '}'  (53)
	compound_list : .  (57)

	ID  shift 114
	CONST  shift 1
	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	READ  shift 115
	PRINT  shift 116
	WHILE  shift 117
	DO  shift 118
	IF  shift 119
	FOR  shift 120
	CONTINUE  shift 121
	BREAK  shift 122
	RETURN  shift 123
	'{'  shift 98
	'}'  reduce 57

	const_decl  goto 124
	var_decl  goto 125
	scalar_type  goto 126
	compound  goto 127
	statement  goto 128
	simple  goto 129
	conditional  goto 130
	while  goto 131
	for  goto 132
	jump  goto 133
	procedure_call  goto 134
	compound_list  goto 135
	variable_reference  goto 136
	array_reference  goto 137
	funciton_invocation  goto 138


state 99
	funct_defi : VOID ID '(' arguments ')' compound .  (40)

	.  reduce 40


state 100
	nonempty_arguments : nonempty_arguments ',' argument .  (43)

	.  reduce 43


state 101
	array_int : '[' INTEGER ']' array_int .  (20)

	.  reduce 20


state 102
	array_expre : '[' expression . ']' array_expre  (65)
	array_expre : '[' expression . ']'  (66)

	']'  shift 139
	.  error


state 103
	expression_list : expression . ',' expression_list  (109)
	expression_list : expression .  (110)

	','  shift 140
	'}'  reduce 110
	')'  reduce 110


state 104
	funciton_invocation : ID '(' expression_list . ')' SEMICOLON  (108)

	')'  shift 141
	.  error


state 105
	expression : '(' expression ')' .  (70)

	.  reduce 70


state 106
	expression : expression_component operator '(' . expression ')'  (68)
	expression : '(' . expression ')'  (70)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 142
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 107
	expression : expression_component operator expression .  (69)

	.  reduce 69


state 108
	funct_decl : scalar_type ID '(' arguments ')' SEMICOLON .  (37)

	.  reduce 37


state 109
	funct_defi : scalar_type ID '(' arguments ')' compound .  (39)

	.  reduce 39


state 110
	initial_array : '{' expression_list . '}'  (27)

	'}'  shift 143
	.  error


state 111
	identifier_list : identifier_list ',' ID '=' expression .  (23)

	.  reduce 23


state 112
	identifier_list : identifier_list ',' ID array_int '=' . initial_array  (25)

	'{'  shift 91
	.  error

	initial_array  goto 144


state 113
	const_list : ID '=' literal_const ',' const_list .  (29)

	.  reduce 29


state 114
	variable_reference : ID .  (62)
	array_reference : ID . array_expre  (64)
	funciton_invocation : ID . '(' expression_list ')' SEMICOLON  (108)

	'['  shift 69
	'('  shift 70
	'='  reduce 62

	array_expre  goto 71


state 115
	simple : READ . variable_reference  (61)

	ID  shift 145
	.  error

	variable_reference  goto 146
	array_reference  goto 137


state 116
	simple : PRINT . variable_reference SEMICOLON  (59)
	simple : PRINT . expression SEMICOLON  (60)

	ID  shift 147
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 148
	literal_const  goto 55
	variable_reference  goto 149
	array_reference  goto 150
	expression_component  goto 57
	funciton_invocation  goto 58


state 117
	while : WHILE . '(' boolean_expression ')' compound  (93)

	'('  shift 151
	.  error


state 118
	while : DO . compound WHILE '(' boolean_expression ')' SEMICOLON  (94)

	'{'  shift 98
	.  error

	compound  goto 152


state 119
	conditional : IF . '(' boolean_expression ')' compound ELSE compound  (91)
	conditional : IF . '(' boolean_expression ')' compound  (92)

	'('  shift 153
	.  error


state 120
	for : FOR . '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')'  (96)

	'('  shift 154
	.  error


state 121
	jump : CONTINUE . SEMICOLON  (106)

	SEMICOLON  shift 155
	.  error


state 122
	jump : BREAK . SEMICOLON  (105)

	SEMICOLON  shift 156
	.  error


state 123
	jump : RETURN . expression SEMICOLON  (104)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 157
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 124
	compound_list : const_decl . compound_list  (55)
	compound_list : .  (57)

	ID  shift 114
	CONST  shift 1
	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	READ  shift 115
	PRINT  shift 116
	WHILE  shift 117
	DO  shift 118
	IF  shift 119
	FOR  shift 120
	CONTINUE  shift 121
	BREAK  shift 122
	RETURN  shift 123
	'{'  shift 98
	'}'  reduce 57

	const_decl  goto 124
	var_decl  goto 125
	scalar_type  goto 126
	compound  goto 127
	statement  goto 128
	simple  goto 129
	conditional  goto 130
	while  goto 131
	for  goto 132
	jump  goto 133
	procedure_call  goto 134
	compound_list  goto 158
	variable_reference  goto 136
	array_reference  goto 137
	funciton_invocation  goto 138


state 125
	compound_list : var_decl . compound_list  (54)
	compound_list : .  (57)

	ID  shift 114
	CONST  shift 1
	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	READ  shift 115
	PRINT  shift 116
	WHILE  shift 117
	DO  shift 118
	IF  shift 119
	FOR  shift 120
	CONTINUE  shift 121
	BREAK  shift 122
	RETURN  shift 123
	'{'  shift 98
	'}'  reduce 57

	const_decl  goto 124
	var_decl  goto 125
	scalar_type  goto 126
	compound  goto 127
	statement  goto 128
	simple  goto 129
	conditional  goto 130
	while  goto 131
	for  goto 132
	jump  goto 133
	procedure_call  goto 134
	compound_list  goto 159
	variable_reference  goto 136
	array_reference  goto 137
	funciton_invocation  goto 138


state 126
	var_decl : scalar_type . identifier_list SEMICOLON  (11)

	ID  shift 160
	.  error

	identifier_list  goto 24
	identifier  goto 25


state 127
	statement : compound .  (46)

	.  reduce 46


state 128
	compound_list : statement . compound_list  (56)
	compound_list : .  (57)

	ID  shift 114
	CONST  shift 1
	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	READ  shift 115
	PRINT  shift 116
	WHILE  shift 117
	DO  shift 118
	IF  shift 119
	FOR  shift 120
	CONTINUE  shift 121
	BREAK  shift 122
	RETURN  shift 123
	'{'  shift 98
	'}'  reduce 57

	const_decl  goto 124
	var_decl  goto 125
	scalar_type  goto 126
	compound  goto 127
	statement  goto 128
	simple  goto 129
	conditional  goto 130
	while  goto 131
	for  goto 132
	jump  goto 133
	procedure_call  goto 134
	compound_list  goto 161
	variable_reference  goto 136
	array_reference  goto 137
	funciton_invocation  goto 138


state 129
	statement : simple .  (47)

	.  reduce 47


state 130
	statement : conditional .  (48)

	.  reduce 48


state 131
	statement : while .  (49)

	.  reduce 49


state 132
	statement : for .  (50)

	.  reduce 50


state 133
	statement : jump .  (51)

	.  reduce 51


state 134
	statement : procedure_call .  (52)

	.  reduce 52


state 135
	compound : '{' compound_list . '}'  (53)

	'}'  shift 162
	.  error


state 136
	simple : variable_reference . '=' expression SEMICOLON  (58)

	'='  shift 163
	.  error


state 137
	variable_reference : array_reference .  (63)

	.  reduce 63


state 138
	procedure_call : funciton_invocation .  (107)

	.  reduce 107


state 139
	array_expre : '[' expression ']' . array_expre  (65)
	array_expre : '[' expression ']' .  (66)

	'['  shift 69
	SEMICOLON  reduce 66
	ID  reduce 66
	CONST  reduce 66
	BOOL  reduce 66
	FLOAT  reduce 66
	DOUBLE  reduce 66
	STRING  reduce 66
	INT  reduce 66
	READ  reduce 66
	PRINT  reduce 66
	WHILE  reduce 66
	DO  reduce 66
	IF  reduce 66
	FOR  reduce 66
	CONTINUE  reduce 66
	BREAK  reduce 66
	RETURN  reduce 66
	'*'  reduce 66
	'/'  reduce 66
	'%'  reduce 66
	'+'  reduce 66
	'-'  reduce 66
	'<'  reduce 66
	'>'  reduce 66
	LE  reduce 66
	EQ  reduce 66
	GE  reduce 66
	NE  reduce 66
	AND  reduce 66
	OR  reduce 66
	']'  reduce 66
	','  reduce 66
	'='  reduce 66
	'{'  reduce 66
	'}'  reduce 66
	')'  reduce 66

	array_expre  goto 164


state 140
	expression_list : expression ',' . expression_list  (109)
	expression_list : .  (111)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	'}'  reduce 111
	')'  reduce 111

	expression  goto 103
	expression_list  goto 165
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 141
	funciton_invocation : ID '(' expression_list ')' . SEMICOLON  (108)

	SEMICOLON  shift 166
	.  error


state 142
	expression : expression_component operator '(' expression . ')'  (68)
	expression : '(' expression . ')'  (70)

	')'  shift 167
	.  error


state 143
	initial_array : '{' expression_list '}' .  (27)

	.  reduce 27


state 144
	identifier_list : identifier_list ',' ID array_int '=' initial_array .  (25)

	.  reduce 25


state 145
	variable_reference : ID .  (62)
	array_reference : ID . array_expre  (64)

	'['  shift 69
	ID  reduce 62
	CONST  reduce 62
	BOOL  reduce 62
	FLOAT  reduce 62
	DOUBLE  reduce 62
	STRING  reduce 62
	INT  reduce 62
	READ  reduce 62
	PRINT  reduce 62
	WHILE  reduce 62
	DO  reduce 62
	IF  reduce 62
	FOR  reduce 62
	CONTINUE  reduce 62
	BREAK  reduce 62
	RETURN  reduce 62
	'{'  reduce 62
	'}'  reduce 62

	array_expre  goto 71


state 146
	simple : READ variable_reference .  (61)

	.  reduce 61


147: reduce/reduce conflict (reduce 62, reduce 74) on SEMICOLON
state 147
	variable_reference : ID .  (62)
	array_reference : ID . array_expre  (64)
	expression_component : ID .  (74)
	funciton_invocation : ID . '(' expression_list ')' SEMICOLON  (108)

	'['  shift 69
	'('  shift 70
	SEMICOLON  reduce 62
	'*'  reduce 74
	'/'  reduce 74
	'%'  reduce 74
	'+'  reduce 74
	'-'  reduce 74
	'<'  reduce 74
	'>'  reduce 74
	LE  reduce 74
	EQ  reduce 74
	GE  reduce 74
	NE  reduce 74
	AND  reduce 74
	OR  reduce 74

	array_expre  goto 71


state 148
	simple : PRINT expression . SEMICOLON  (60)

	SEMICOLON  shift 168
	.  error


state 149
	simple : PRINT variable_reference . SEMICOLON  (59)

	SEMICOLON  shift 169
	.  error


150: reduce/reduce conflict (reduce 63, reduce 76) on SEMICOLON
state 150
	variable_reference : array_reference .  (63)
	expression_component : array_reference .  (76)

	SEMICOLON  reduce 63
	'*'  reduce 76
	'/'  reduce 76
	'%'  reduce 76
	'+'  reduce 76
	'-'  reduce 76
	'<'  reduce 76
	'>'  reduce 76
	LE  reduce 76
	EQ  reduce 76
	GE  reduce 76
	NE  reduce 76
	AND  reduce 76
	OR  reduce 76


state 151
	while : WHILE '(' . boolean_expression ')' compound  (93)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 170
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58
	boolean_expression  goto 171


state 152
	while : DO compound . WHILE '(' boolean_expression ')' SEMICOLON  (94)

	WHILE  shift 172
	.  error


state 153
	conditional : IF '(' . boolean_expression ')' compound ELSE compound  (91)
	conditional : IF '(' . boolean_expression ')' compound  (92)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 170
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58
	boolean_expression  goto 173


state 154
	for : FOR '(' . initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')'  (96)
	initial_expression : .  (99)

	ID  shift 174
	BOOL  shift 2
	FLOAT  shift 4
	DOUBLE  shift 5
	STRING  shift 6
	INT  shift 7
	SEMICOLON  reduce 99

	scalar_type  goto 175
	initial_expression  goto 176


state 155
	jump : CONTINUE SEMICOLON .  (106)

	.  reduce 106


state 156
	jump : BREAK SEMICOLON .  (105)

	.  reduce 105


state 157
	jump : RETURN expression . SEMICOLON  (104)

	SEMICOLON  shift 177
	.  error


state 158
	compound_list : const_decl compound_list .  (55)

	.  reduce 55


state 159
	compound_list : var_decl compound_list .  (54)

	.  reduce 54


state 160
	identifier : ID .  (17)
	identifier : ID . array_int  (18)
	identifier_list : ID . '=' expression  (24)
	identifier_list : ID . array_int '=' initial_array  (26)

	'['  shift 31
	'='  shift 32
	SEMICOLON  reduce 17
	','  reduce 17

	array_int  goto 34


state 161
	compound_list : statement compound_list .  (56)

	.  reduce 56


state 162
	compound : '{' compound_list '}' .  (53)

	.  reduce 53


state 163
	simple : variable_reference '=' . expression SEMICOLON  (58)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 178
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 164
	array_expre : '[' expression ']' array_expre .  (65)

	.  reduce 65


state 165
	expression_list : expression ',' expression_list .  (109)

	.  reduce 109


state 166
	funciton_invocation : ID '(' expression_list ')' SEMICOLON .  (108)

	.  reduce 108


167: reduce/reduce conflict (reduce 68, reduce 70) on SEMICOLON
167: reduce/reduce conflict (reduce 68, reduce 70) on ']'
167: reduce/reduce conflict (reduce 68, reduce 70) on ','
167: reduce/reduce conflict (reduce 68, reduce 70) on '}'
167: reduce/reduce conflict (reduce 68, reduce 70) on ')'
state 167
	expression : expression_component operator '(' expression ')' .  (68)
	expression : '(' expression ')' .  (70)

	.  reduce 68


state 168
	simple : PRINT expression SEMICOLON .  (60)

	.  reduce 60


state 169
	simple : PRINT variable_reference SEMICOLON .  (59)

	.  reduce 59


state 170
	boolean_expression : expression .  (95)

	.  reduce 95


state 171
	while : WHILE '(' boolean_expression . ')' compound  (93)

	')'  shift 179
	.  error


state 172
	while : DO compound WHILE . '(' boolean_expression ')' SEMICOLON  (94)

	'('  shift 180
	.  error


state 173
	conditional : IF '(' boolean_expression . ')' compound ELSE compound  (91)
	conditional : IF '(' boolean_expression . ')' compound  (92)

	')'  shift 181
	.  error


state 174
	initial_expression : ID . '=' expression  (97)

	'='  shift 182
	.  error


state 175
	initial_expression : scalar_type . ID '=' expression  (98)

	ID  shift 183
	.  error


state 176
	for : FOR '(' initial_expression . SEMICOLON control_expression SEMICOLON increment_expression ')'  (96)

	SEMICOLON  shift 184
	.  error


state 177
	jump : RETURN expression SEMICOLON .  (104)

	.  reduce 104


state 178
	simple : variable_reference '=' expression . SEMICOLON  (58)

	SEMICOLON  shift 185
	.  error


state 179
	while : WHILE '(' boolean_expression ')' . compound  (93)

	'{'  shift 98
	.  error

	compound  goto 186


state 180
	while : DO compound WHILE '(' . boolean_expression ')' SEMICOLON  (94)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 170
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58
	boolean_expression  goto 187


state 181
	conditional : IF '(' boolean_expression ')' . compound ELSE compound  (91)
	conditional : IF '(' boolean_expression ')' . compound  (92)

	'{'  shift 98
	.  error

	compound  goto 188


state 182
	initial_expression : ID '=' . expression  (97)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 189
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 183
	initial_expression : scalar_type ID . '=' expression  (98)

	'='  shift 190
	.  error


state 184
	for : FOR '(' initial_expression SEMICOLON . control_expression SEMICOLON increment_expression ')'  (96)
	control_expression : .  (101)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	SEMICOLON  reduce 101

	expression  goto 191
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58
	control_expression  goto 192


state 185
	simple : variable_reference '=' expression SEMICOLON .  (58)

	.  reduce 58


state 186
	while : WHILE '(' boolean_expression ')' compound .  (93)

	.  reduce 93


state 187
	while : DO compound WHILE '(' boolean_expression . ')' SEMICOLON  (94)

	')'  shift 193
	.  error


state 188
	conditional : IF '(' boolean_expression ')' compound . ELSE compound  (91)
	conditional : IF '(' boolean_expression ')' compound .  (92)

	ELSE  shift 194
	ID  reduce 92
	CONST  reduce 92
	BOOL  reduce 92
	FLOAT  reduce 92
	DOUBLE  reduce 92
	STRING  reduce 92
	INT  reduce 92
	READ  reduce 92
	PRINT  reduce 92
	WHILE  reduce 92
	DO  reduce 92
	IF  reduce 92
	FOR  reduce 92
	CONTINUE  reduce 92
	BREAK  reduce 92
	RETURN  reduce 92
	'{'  reduce 92
	'}'  reduce 92


state 189
	initial_expression : ID '=' expression .  (97)

	.  reduce 97


state 190
	initial_expression : scalar_type ID '=' . expression  (98)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	.  error

	expression  goto 195
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58


state 191
	control_expression : expression .  (100)

	.  reduce 100


state 192
	for : FOR '(' initial_expression SEMICOLON control_expression . SEMICOLON increment_expression ')'  (96)

	SEMICOLON  shift 196
	.  error


state 193
	while : DO compound WHILE '(' boolean_expression ')' . SEMICOLON  (94)

	SEMICOLON  shift 197
	.  error


state 194
	conditional : IF '(' boolean_expression ')' compound ELSE . compound  (91)

	'{'  shift 98
	.  error

	compound  goto 198


state 195
	initial_expression : scalar_type ID '=' expression .  (98)

	.  reduce 98


state 196
	for : FOR '(' initial_expression SEMICOLON control_expression SEMICOLON . increment_expression ')'  (96)
	increment_expression : .  (103)

	ID  shift 44
	SCIENTIFIC  shift 45
	INTEGER  shift 46
	FLOATCONST  shift 47
	STRINGCONST  shift 48
	TRUE  shift 49
	FALSE  shift 50
	'-'  shift 51
	'!'  shift 52
	'('  shift 53
	')'  reduce 103

	expression  goto 199
	literal_const  goto 55
	array_reference  goto 56
	expression_component  goto 57
	funciton_invocation  goto 58
	increment_expression  goto 200


state 197
	while : DO compound WHILE '(' boolean_expression ')' SEMICOLON .  (94)

	.  reduce 94


state 198
	conditional : IF '(' boolean_expression ')' compound ELSE compound .  (91)

	.  reduce 91


state 199
	increment_expression : expression .  (102)

	.  reduce 102


state 200
	for : FOR '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression . ')'  (96)

	')'  shift 201
	.  error


state 201
	for : FOR '(' initial_expression SEMICOLON control_expression SEMICOLON increment_expression ')' .  (96)

	.  reduce 96


State 147 contains 1 reduce/reduce conflict.
State 150 contains 1 reduce/reduce conflict.
State 167 contains 5 reduce/reduce conflicts.


51 terminals, 42 nonterminals
112 grammar rules, 202 states
